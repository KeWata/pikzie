.. -*- rst -*-

========
 README
========

Name
====

Pikzie

License
=======

LGPL

What's this?
============

Pikzie is an Unit Testing Framework for Python.

Pikzie provides the following features that are lacked in
unittest.py included in the standard Python distribution:

  * Pythonic API
  * a lot of assertions
  * outputs result with useful format for debugging.

And Pikzie has the following features:

  * ...

Dependencies
============

  * Python >= 2.3

Get
===

http://sourceforge.net/project/showfiles.php?group_id=215708

::

  % svn co https://pikzie.svn.sourceforge.net/svnroot/pikzie/trunk pikzie

Install
=======

::

  % sudo python setup.py install

Usage
=====

We assume that you have the following directory structure::

  . -+- lib  --- your_module --- ...
     |
     +- test -+- run-test.py
              |
	      +- __init__.py
              |
	      +- test_module1.py
              |
	      +- ...

test/run-test.py is the following::

  #!/usr/bin/env python

  import sys
  import os

  base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
  sys.path.insert(0, os.path.join(base_dir, "lib"))
  sys.path.insert(0, base_dir)

  import pikzie

  sys.exit(pikzie.Tester().run())

test/test_*.py are automatically loaded and defined tests
are ran by invoking run-test.py like the following::

  % test/run-test.py

Options
-------

-nTEST_NAME, --name=TEST_NAME  runs tests that are matched
                               with TEST_NAME. If TEST_NAME
                               is surrounded by "/"
                               (e.g. /test\_/), TEST_NAME is
                               handled as regular
                               expression.

			       This option can be specified
                               n times. In the case, Pikzie
                               runs tests that are matched
                               with any TEST_NAME.

-tTEST_CASE_NAME, --test-case=TEST_CASE_NAME  runs test
                                              cases that are
                                              matched with
                                              TEST_CASE_NAME.
					      If
                                              TEST_CASE_NAME
                                              is surrounded
                                              by "/"
                                              (e.g. /TestMyLib/),
                                              TEST_CASE_NAME
                                              is handled as
                                              regular
                                              expression.

					      This option
					      can be
					      specified n
					      times. In the
					      case, Pikzie
					      runs test
					      cases that are
					      matched with
					      any
					      TEST_CASE_NAME.

-vLEVEL, --verbose=LEVEL  specifies verbose level. LEVEL is
                          one of [s|silent|n|normal|v|verbose].

			  This option is only for console
			  UI. (There is only console UI at
			  present.)

-cMODE, --color=MODE      specifies whether colorize output
                          or not. MODE is one of
                          [yes|true|no|false|auto]. If 'yes'
                          or 'true' is specified, colorized
                          output by escape sequence is used.
			  If 'no' or 'false' is specified,
                          colorized output is never used. If 'auto'
			  or the option is omitted,
                          colorized output is used if available.

			  This option is only for console
			  UI. (There is only console UI at
			  present.)

How to test
===========

TODO

Test result
===========

TODO

References
==========

TODO

Assertions
----------

Use pydoc::

  % pydoc pikzie.assertions.Assertions

Or you can see HTML version on the Web:
http://pikzie.sourceforge.net/assertions.html

Template
--------

Here is a template of a test case::

  import pikzie
  import test_target_module
  
  class TestYourModule(pikzie.TestCase):
      def setup(self):
	  self.setup_called = True
  
      def teardown(self):
	  self.setup_called = False
  
      def test_condition(self): # starts with "test_"
          self.assert_true(self.setup_called)

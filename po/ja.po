# Pikzie ja.po.
# Copyright (C) 2008 kouhei Sutou
# This file is distributed under the same license as the Pikzie package.
# Kouhei Sutou <kou@cozmixng.org>, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: 0.1.0\n"
"POT-Creation-Date: 2008-01-28 14:30+JST\n"
"PO-Revision-Date: 2008-01-28 14:33+0900\n"
"Last-Translator: Kouhei Sutou <kou@cozmixng.org>\n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: pygettext.py 1.5\n"

#: lib/pikzie/assertions.py:15
msgid ""
"Passes if expression is None.\n"
"\n"
"        self.assert_none(None) # => pass\n"
"        "
msgstr ""
"expressionがNoneのときパスします。\n"
"\n"
"        self.assert_none(None) # => pass\n"
"        "

#: lib/pikzie/assertions.py:26
msgid ""
"Passes if expression is not None.\n"
"\n"
"        self.assert_not_none(\"not none\") # => pass\n"
"        "
msgstr ""
"expressionがNoneではないときパスします。\n"
"\n"
"        self.assert_not_none(\"not none\") # => pass\n"
"        "

#: lib/pikzie/assertions.py:36
msgid ""
"Passes if expression is true value.\n"
"\n"
"        self.assert_true(True)     # => pass\n"
"        self.assert_true(\"string\") # => pass\n"
"        "
msgstr ""
"expressionが真の値のときパスします。\n"
"\n"
"        self.assert_true(True)     # => pass\n"
"        self.assert_true(\"string\") # => pass\n"
"        "

#: lib/pikzie/assertions.py:48
msgid ""
"Passes if expression is false value.\n"
"\n"
"        self.assert_false(False) # => pass\n"
"        self.assert_false(\"\")    # => pass\n"
"        "
msgstr ""
"expressionが偽の値のときパスします。\n"
"\n"
"        self.assert_false(False) # => pass\n"
"        self.assert_false(\"\")    # => pass\n"
"        "

#: lib/pikzie/assertions.py:60
msgid ""
"Passes if expected == actual.\n"
"\n"
"        self.assert_equal(5, 2 + 3) # => pass\n"
"        "
msgstr ""
"expected == actualのときパスします。\n"
"\n"
"        self.assert_equal(5, 2 + 3) # => pass\n"
"        "

#: lib/pikzie/assertions.py:75
msgid ""
"Passes if not_expected != actual.\n"
"\n"
"        self.assert_equal(-5, 2 + 3) # => pass\n"
"        "
msgstr ""
"not_expected != actualのときパスします。\n"
"\n"
"        self.assert_equal(-5, 2 + 3) # => pass\n"
"        "

#: lib/pikzie/assertions.py:94
msgid ""
"Passes if (expected - delta) <= actual <= (expected + delta).\n"
"\n"
"        self.assert_in_delta(3, 3.01, 0.001) # => pass\n"
"        "
msgstr ""
"(expected - delta) <= actual <= (expected + delta)のときパスします。\n"
"\n"
"        self.assert_in_delta(3, 3.01, 0.001) # => pass\n"
"        "

#: lib/pikzie/assertions.py:112
msgid ""
"Passes if re.match(pattern, target) doesn't return None.\n"
"\n"
"        self.assert_match(\"abc\", \"abcde\") # => pass\n"
"        self.assert_match(\"abc\", \"deabc\") # => fail\n"
"        "
msgstr ""
"re.match(pattern, target)がNoneを返さなければパスします。\n"
"\n"
"        self.assert_match(\"abc\", \"abcde\") # => pass\n"
"        self.assert_match(\"abc\", \"deabc\") # => fail\n"
"        "

#: lib/pikzie/assertions.py:131
msgid ""
"Passes if re.match(pattern, target) returns None.\n"
"\n"
"        self.assert_not_match(\"abc\", \"deabc\") # => pass\n"
"        self.assert_not_match(\"abc\", \"abcde\") # => fail\n"
"        "
msgstr ""
"re.match(pattern, target)がNoneを返すとパスします。\n"
"\n"
"        self.assert_not_match(\"abc\", \"deabc\") # => pass\n"
"        self.assert_not_match(\"abc\", \"abcde\") # => fail\n"
"        "

#: lib/pikzie/assertions.py:150
msgid ""
"Passes if re.search(pattern, target) doesn't return None.\n"
"\n"
"        self.assert_search(\"abc\", \"deabc\") # => pass\n"
"        self.assert_search(\"abc\", \"deABC\") # => fail\n"
"        "
msgstr ""
"re.search(pattern, target)がNoneを返さなければパスします。\n"
"\n"
"        self.assert_search(\"abc\", \"deabc\") # => pass\n"
"        self.assert_search(\"abc\", \"deABC\") # => fail\n"
"        "

#: lib/pikzie/assertions.py:169
msgid ""
"Passes if re.search(pattern, target) returns None.\n"
"\n"
"        self.assert_search(\"abc\", \"deABC\") # => pass\n"
"        self.assert_search(\"abc\", \"deabc\") # => fail\n"
"        "
msgstr ""
"re.search(pattern, target)がNoneを返すとパスします。\n"
"\n"
"        self.assert_search(\"abc\", \"deABC\") # => pass\n"
"        self.assert_search(\"abc\", \"deabc\") # => fail\n"
"        "

#: lib/pikzie/assertions.py:188
msgid ""
"Passes if hasattr(object, name) returns True.\n"
"\n"
"        self.assert_hasattr(\"string\", \"strip\")   # => pass\n"
"        self.assert_hasattr(\"string\", \"unknown\") # => fail\n"
"        "
msgstr ""
"hasattr(object, name)がTrueを返すとパスします。\n"
"\n"
"        self.assert_hasattr(\"string\", \"strip\")   # => pass\n"
"        self.assert_hasattr(\"string\", \"unknown\") # => fail\n"
"        "

#: lib/pikzie/assertions.py:202
msgid ""
"Passes if callable(object) returns True.\n"
"\n"
"        self.assert_callable(lambda: 1) # => pass\n"
"        self.assert_callable(\"string\")  # => fail\n"
"        "
msgstr ""
"callable(object)がTrueを返すとパスします。\n"
"\n"
"        self.assert_callable(lambda: 1) # => pass\n"
"        self.assert_callable(\"string\")  # => fail\n"
"        "

#: lib/pikzie/assertions.py:215
msgid ""
"Passes if callable_object(*args, **kw_args) raises exception.\n"
"\n"
"        self.assert_call_raise(NameError, lambda: unknown_variable) # => "
"pass\n"
"        self.assert_call_raise(NameError, lambda: 1)                # => "
"fail\n"
"        "
msgstr ""
"callable_object(*args, **kw_args)が例外exceptionを発生させるとパスします。\n"
"\n"
"        self.assert_call_raise(NameError, lambda: unknown_variable) # => "
"pass\n"
"        self.assert_call_raise(NameError, lambda: 1)                # => "
"fail\n"
"        "

#: lib/pikzie/core.py:18
msgid ""
"A test suite is a composite test consisting of a number of TestCases.\n"
"\n"
"    For use, create an instance of TestSuite, then add test case instances.\n"
"    When all tests have been added, the suite can be passed to a test\n"
"    runner, such as TextTestRunner. It will run the individual test cases\n"
"    in the order in which they were added, aggregating the results. When\n"
"    subclassing, do not forget to call the base class constructor.\n"
"    "
msgstr ""

#: lib/pikzie/core.py:79
msgid "Hook method for deconstructing the test fixture after testing it."
msgstr ""

#: lib/pikzie/core.py:83
msgid ""
"A class whose instances are single test cases.\n"
"\n"
"    By default, the test code itself should be placed in a method named\n"
"    'runTest'.\n"
"\n"
"    If the fixture may be used for many test cases, create as\n"
"    many test methods as are needed. When instantiating such a TestCase\n"
"    subclass, specify in the constructor arguments the name of the test "
"method\n"
"    that the instance is to execute.\n"
"\n"
"    Test authors should subclass TestCase for their own tests. Construction\n"
"    and deconstruction of the test's environment ('fixture') can be\n"
"    implemented by overriding the 'setUp' and 'tearDown' methods "
"respectively.\n"
"\n"
"    If it is necessary to override the __init__ method, the base class\n"
"    __init__ method must always be called. It is important that subclasses\n"
"    should not change the signature of their __init__ method, since "
"instances\n"
"    of the classes are instantiated automatically by parts of the framework\n"
"    in order to be run.\n"
"    "
msgstr ""

#: lib/pikzie/core.py:112
msgid ""
"Returns a one-line description of the test, or None if no\n"
"        description has been provided.\n"
"\n"
"        The default implementation of this method returns the first line of\n"
"        the specified test method's docstring.\n"
"        "
msgstr ""

#: lib/pikzie/core.py:324
msgid ""
"Holder for test result information.\n"
"\n"
"    Test results are automatically managed by the TestCase and TestSuite\n"
"    classes, and do not need to be explicitly manipulated by writers of "
"tests.\n"
"\n"
"    Each instance holds the total number of tests run, and collections of\n"
"    failures and errors that occurred among those test runs. The "
"collections\n"
"    contain tuples of (testcase, exceptioninfo), where exceptioninfo is the\n"
"    formatted traceback of the error that occurred.\n"
"    "
msgstr ""

#: lib/pikzie/core.py:362
msgid "Called when the given test is about to be run"
msgstr ""

#: lib/pikzie/core.py:368
msgid "Called when the given test has been run"
msgstr ""

#: lib/pikzie/core.py:373
msgid "Called when an error has occurred."
msgstr ""

#: lib/pikzie/core.py:378
msgid "Called when a failure has occurred."
msgstr ""

#: lib/pikzie/core.py:383
msgid "Called when a test has completed successfully"
msgstr ""

#: lib/pikzie/core.py:387
msgid "Indicates that the tests should be interrupted"
msgstr ""

#: lib/pikzie/tester.py:8
msgid ""
"A command-line program that runs a set of tests; this is primarily\n"
"       for making test modules conveniently executable.\n"
"    "
msgstr ""

#: lib/pikzie/ui/console.py:38
msgid "Run the given test case or test suite."
msgstr ""

.. -*- rst -*-

========
 README
========

名前
====

Pikzie（ピクジー）

ライセンス
==========

LGPL

Pikzie?
=======

PythonのためのUnit Testing Frameworkです。

PikzieはPython標準のunittest.pyに欠けている以下の機能を提供し
ます。

  * PythonらしいAPI
  * 豊富な表明（assert_*）
  * デバッグに使いやすい出力結果

上記に加えて以下のような特徴があります。

  * ...

依存関係
========

  * Python >= 2.3

入手方法
========

http://sourceforge.net/project/showfiles.php?group_id=215708

::

  % svn co https://pikzie.svn.sourceforge.net/svnroot/pikzie/trunk pikzie

インストール
============

::

  % sudo python setup.py install

使い方
======

以下のようなディレクトリ構造だとする。::

  . -+- lib  --- yourlib --- ...
     |
     +- test -+- run-test.py
              |
	      +- __init__.py
              |
	      +- test_module1.py
              |
	      +- ...

test/run-test.pyは以下の通りである。::

  #!/usr/bin/env python

  import sys
  import os

  base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
  sys.path.insert(0, os.path.join(base_dir, "lib"))
  sys.path.insert(0, base_dir)

  import pikzie

  sys.exit(pikzie.Tester().run())

以下のようにtest/run-test.pyを起動すると、test/test_*.pyテス
トを自動で読み込み、定義されているテストを実行する。::

  % test/run-test.py

オプション
==========

-nTEST_NAME, --name=TEST_NAME  TEST_NAMEにマッチしたテストを実
                               行します。もし、TEST_NAMEが
                               "/"で囲まれていた場合は（例:
                               /test\_/）正規表現として扱いま
                               す。

			       このオプションは何度でも指定で
                               き、その場合は、どれかのパター
                               ンにマッチしたテストすべてが実
                               行されます。

-tTEST_CASE_NAME, --test-case=TEST_CASE_NAME  TEST_CASE_NAME
                                              にマッチしたテ
                                              ストケースを実
                                              行します。もし、
                                              TEST_CASE_NAME
                                              が"/"で囲まれて
                                              いた場合は（例:
                                              /TestMyLib/）正
                                              規表現として扱
                                              います。

					      このオプション
                                              は何度でも指定
                                              でき、その場合
                                              は、どれかのパ
                                              ターンにマッチ
                                              したテストケー
                                              スすべてが実行
                                              されます。

-vLEVEL, --verbose=LEVEL  出力の詳細さを指定します。LEVELは
                          [s|silent|n|normal|v|verbose]のう
	 		  ちのどれかです。

			  このオプションはコンソールUIを使用
			  する場合だけ有効です。（現在はコン
			  ソールUIしかありません。）

-cMODE, --color=MODE      出力を色付けするかどうかを指定しま
                          す。MODEには[yes|true|no|false|auto]の
                          どれかを指定します。yesまたはtrue
                          が指定された場合はエスケープシーケ
                          ンスで色付けして出力します。
                          noまたはfalseが指定された場合は色付
                          けしません。autoあるいは値が省略さ
                          れた時は、可能なら色付けをします。

			  このオプションはコンソールUIを使用
                          する場合だけ有効です。（現在はコン
                          ソールUIしかありません。）

テストの仕方
============

TODO

テスト結果
==========

TODO

リファレンス
============

TODO

表明
----

pydocを見てください。::

  % pydoc pikzie.assertions.Assertions

あるいはHTML化されたものをWeb上で見ることもできます。
http://pikzie.sourceforge.net/assertions.html


雛型
----

テストの雛型は以下のようになります。::

  import pikzie
  import テスト対象のモジュール
  
  class TestYourModule(pikzie.TestCase):
      def setup(self):
          # 初期化用コード
	  self.setup_called = True

      def teardown(self):
          # 後片付け用コード
	  self.setup_called = False

      def test_condition(self): # "test_"から始める
          self.assert_true(self.setup_called)

.. -*- rst -*-

========
 README
========

名前
====

Pikzie（ピクジー）

ライセンス
==========

LGPL

Pikzie?
=======

Pythonのための書きやすさとデバッグのしやすさを重視したUnit
Testing Frameworkです。

PikzieはPython標準のunittest.pyに欠けている以下の機能を提供し
ます。

  * PythonらしいAPI
  * 豊富な表明（assert_*）
  * デバッグに使いやすい出力結果

上記に加えて以下のような特徴があります。

  * ...

依存関係
========

  * Python >= 2.3

入手方法
========

http://sourceforge.net/project/showfiles.php?group_id=215708

::

  % svn co https://pikzie.svn.sourceforge.net/svnroot/pikzie/trunk pikzie

インストール
============

::

  % sudo python setup.py install

使い方
======

以下のようなディレクトリ構造だとします。::

  . -+- lib  --- yourlib --- ...
     |
     +- test -+- run-test.py
              |
	      +- __init__.py
              |
	      +- test_module1.py
              |
	      +- ...

test/run-test.pyは以下の通りです。::

  #!/usr/bin/env python

  import sys
  import os

  base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
  sys.path.insert(0, os.path.join(base_dir, "lib"))
  sys.path.insert(0, base_dir)

  import pikzie

  sys.exit(pikzie.Tester().run())

以下のようにtest/run-test.pyを起動すると、test/test_*.pyテス
トを自動で読み込み、定義されているテストを実行します。::

  % test/run-test.py

オプション
==========

-nTEST_NAME, --name=TEST_NAME  TEST_NAMEにマッチしたテストを実
                               行します。もし、TEST_NAMEが
                               "/"で囲まれていた場合は（例:
                               /test\_/）正規表現として扱いま
                               す。

			       このオプションは何度でも指定で
                               き、その場合は、どれかのパター
                               ンにマッチしたテストすべてが実
                               行されます。

-tTEST_CASE_NAME, --test-case=TEST_CASE_NAME  TEST_CASE_NAME
                                              にマッチしたテ
                                              ストケースを実
                                              行します。もし、
                                              TEST_CASE_NAME
                                              が"/"で囲まれて
                                              いた場合は（例:
                                              /TestMyLib/）正
                                              規表現として扱
                                              います。

					      このオプション
                                              は何度でも指定
                                              でき、その場合
                                              は、どれかのパ
                                              ターンにマッチ
                                              したテストケー
                                              スすべてが実行
                                              されます。

-vLEVEL, --verbose=LEVEL  出力の詳細さを指定します。LEVELは
                          [s|silent|n|normal|v|verbose]のう
	 		  ちのどれかです。

			  このオプションはコンソールUIを使用
			  する場合だけ有効です。（現在はコン
			  ソールUIしかありません。）

-cMODE, --color=MODE      出力を色付けするかどうかを指定しま
                          す。MODEには[yes|true|no|false|auto]の
                          どれかを指定します。yesまたはtrue
                          が指定された場合はエスケープシーケ
                          ンスで色付けして出力します。
                          noまたはfalseが指定された場合は色付
                          けしません。autoあるいは値が省略さ
                          れた時は、可能なら色付けをします。

			  このオプションはコンソールUIを使用
                          する場合だけ有効です。（現在はコン
                          ソールUIしかありません。）

--color-scheme=SCHEME     出力時にどの色を使うかを指定します。
                          SCHEMEには[default]のどれかを指定
                          します。

			  このオプションはコンソールUIを使用
                          する場合だけ有効です。（現在はコン
                          ソールUIしかありません。）

テスト結果
==========

テスト結果は例えば以下のようになります。::

  ....F..............................
  
  1) Failure: TestLoader.test_collect_test_cases: sorted(test_case_names))
  expected: <['TestXXX1', 'TestXXX2', 'TestYYY', 'TestZZZ']>
   but was: <['TestXXX1', 'TestXXX2', 'TestYYY']>
  diff:
  - ['TestXXX1', 'TestXXX2', 'TestYYY', 'TestZZZ']
  ?                                   -----------
  
  + ['TestXXX1', 'TestXXX2', 'TestYYY']
  /home/kou/work/python/pikzie/test/test_loader.py:30: test_collect_test_cases(): sorted(test_case_names))
  
  Finished in 0.013 seconds
  
  35 test(s), 55 assertion(s), 1 failure(s), 0 error(s), 0 pending(s), 0 notification(s)

進行状況
--------

一番上にある「.」と「F」の部分がテストの進行状況を示していま
す。::

  ....F..............................

各「.」、「F」が1つのテストケース（テストメソッド）を表してい
ます。「.」が成功したテストケース、「F」が失敗したテストケー
スを表しています。他にも「E」、「P」、「N」があり、それぞれエ
ラー、保留、通知を表しています。まとめると以下のようになりま
す。

.
  成功したテスト

F
  表明が失敗したテスト

E
  異常終了したテスト

P
  保留マークがついているテスト

N
  通知が行われたテスト

上記のテストを表す印はテストが実行される毎に出力されます。テ
スト実行中は、この出力で実行状況を確認できます。

テスト結果のまとめ
------------------

テストが終了すると、テスト結果のまとめを出力します。まとめは、
まず、成功しなかったテストの詳細をそれぞれ表示します。例では
1つ失敗があったのでそれを表示しています。::

  1) Failure: TestLoader.test_collect_test_cases: sorted(test_case_names))
  expected: <['TestXXX1', 'TestXXX2', 'TestYYY', 'TestZZZ']>
   but was: <['TestXXX1', 'TestXXX2', 'TestYYY']>
  diff:
  - ['TestXXX1', 'TestXXX2', 'TestYYY', 'TestZZZ']
  ?                                   -----------
  
  + ['TestXXX1', 'TestXXX2', 'TestYYY']
  /home/kou/work/python/pikzie/test/test_loader.py:30: test_collect_test_cases(): sorted(test_case_names))

この例ではTestLoader.test_collect_test_casesテストケースが失
敗し、期待する結果が::

  ['TestXXX1', 'TestXXX2', 'TestYYY', 'TestZZZ']

だったのに、実際は::

  ['TestXXX1', 'TestXXX2', 'TestYYY']

になっていることを表しています。「diff:」以下の部分ではこれ
らの違いがわかりやすいように異なる部分に印を付けて表示してい
ます。::

  diff:
  - ['TestXXX1', 'TestXXX2', 'TestYYY', 'TestZZZ']
  ?                                   -----------
  
  + ['TestXXX1', 'TestXXX2', 'TestYYY']

また、この失敗した表明は
/home/kou/work/python/pikzie/test/test_loader.pyの30行目、
test_collect_test_cases()メソッド内の以下のような内容の部分::

  sorted(test_case_names))

にあることがわかります。

テスト結果の詳細一覧の後はテストにかかった時間が表示されま
す。::

  Finished in 0.013 seconds

最後にテスト結果の要約が表示されます。::

  35 test(s), 55 assertion(s), 1 failure(s), 0 error(s), 0 pending(s), 0 notification(s)

それぞれは以下のような意味です。

n test(s)
  n個のテストケース（テスト関数）を実行した

n assertion(s)
  n個の表明にパスした

n failure(s)
  n個の表明に失敗した

n error(s)
  n個の異常事態が発生した（例外が発生した）

n pending(s)
  n個のテストケースを保留にした（self.pend()を使用した）

n notification(s)
  n個の通知が発生した（self.notify()を使用した）

この例では35個のテストケースを実行し、55個の表明にパスし、1
個の表明に失敗したということになります。異常事態や保留にした
テストケースなどはありませんでした。

リファレンス
============

表明
----

pydocを見てください。::

  % pydoc pikzie.assertions.Assertions

あるいはHTML化されたものをWeb上で見ることもできます。
http://pikzie.sourceforge.net/assertions.html

付加情報
--------

テストに付加情報を加えて、テスト失敗時により有益な情報を利用
することができます。例えば、以下のようにテストにBug IDの情報
を付加することができます。::

  import pikzie
  
  class TestYourModule(pikzie.TestCase):
      @pikzie.bug(123)
      def test_invalid_input(self):
          self.assert_call_raise(IndexError, ().__getitem__, 0)

この例では、test_invalid_inputテストがBug #123のテストである
という情報を付加しています。

また、この例ではPython 2.4から導入されたデコレータ機能を利用
しています。Python 2.3で使用する場合は以下のように書いてくだ
さい。::

  def test_invalid_input(self):
      self.assert_call_raise(IndexError, ().__getitem__, 0)
  test_invalid_input = pikzie.bug(123)(test_invalid_input)

現在利用可能な付加情報は以下の通りです。

pikzie.bug(id)
  Bug ID情報としてidを設定します。

雛型
----

テストの雛型は以下のようになります。::

  import pikzie
  import テスト対象のモジュール
  
  class TestYourModule(pikzie.TestCase):
      def setup(self):
          # 初期化用コード
	  self.setup_called = True
  
      def teardown(self):
          # 後片付け用コード
	  self.setup_called = False
  
      def test_condition(self): # "test_"から始める
          self.assert_true(self.setup_called)
